cmake_minimum_required(VERSION 3.5)
project(PIPC VERSION 0.1.0 LANGUAGES CXX)

set(DEFAULT_BUILD_TYPE "Release")

if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    message(STATUS "Setting build type to '${DEFAULT_BUILD_TYPE}' as none was specified.")
endif()

include(GNUInstallDirs)
if(WIN32)
    set(SOURCE_FILES
            src/api/IPC_process_creation.cpp
            src/windows/windows_proc_creation.cpp
            src/api/process_creation.cpp)
elseif(UNIX)
    set(SOURCE_FILES
            src/api/IPC_process_creation.cpp
            src/linux/linux_proc_creation.cpp
            src/api/process_creation.cpp)
endif()

add_library(${PROJECT_NAME} SHARED ${SOURCE_FILES})

if(WIN32)
    target_include_directories(${PROJECT_NAME} PUBLIC
            $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc/api>
            $<INSTALL_INTERFACE:inc/api>
            PRIVATE inc/windows)
elseif(UNIX)
    target_include_directories(${PROJECT_NAME} PUBLIC
            $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc/api>
            $<INSTALL_INTERFACE:inc/api>
            PRIVATE inc/linux)
endif()


set_target_properties(${PROJECT_NAME} PROPERTIES
        VERSION ${PROJECT_VERSION}
        SOVERSION 0.1)

install(TARGETS ${PROJECT_NAME} EXPORT ${PROJECT_NAME}Config
        LIBRARY  DESTINATION ${CMAKE_INSTALL_LIBDIR}
        PUBLIC_HEADER  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME})

install(DIRECTORY inc/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME})

install(EXPORT ${PROJECT_NAME}Config DESTINATION share/${PROJECT_NAME}/cmake)

export(TARGETS ${PROJECT_NAME} FILE ${PROJECT_NAME}Config.cmake)

configure_file(
    "${CMAKE_CURRENT_SOURCE_DIR}/cmake_uninstall.cmake.in"
    "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
    IMMEDIATE @ONLY)

add_custom_target(uninstall
    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)
